from numpy import array, where, empty, mean, log, pi, zeros, sqrt, eye, trace, loadtxt, concatenate as concat, bmat
from numpy.random import default_rng, normal
from numpy.linalg import pinv

datas = loadtxt("data_vc3.txt", skiprows=1)

Y = datas[:, 0]
X_1 = datas[:, 1:501]
X_2 = datas[:, 501:]

n = Y.shape[0]
p = X_1.shape[1]
q = X_2.shape[1]

print(type(n))

sig1_old, sig2_old, sige_old = 1, 1, 1

print(S_3)

input("wait")

# the PXEM algorithm
def PXEM(Y, X_1, X_2, s1, s2, e, PX=True):

    global n, p, q

    lLs_st, lLs_px, inlLs_st, inlLs_px = [], [], [], []

    g1_old, g2_old = 1, 1
    sig1_old, sig2_old, sige_old = s1, s2, e

    while True:

        print("The existing parameters:")
        for values in [g1_old, g2_old, sig1_old, sig2_old, sige_old]:
            print(round(values, 6), end=" ")
        print("")

        # the Mean and SD related to the posterior of B_1, B_2
        M_1 = pinv((sige_old / sig1_old) ** 2 * eye(p) +
                   X_1.transpose() @ X_1) @ X_1.transpose() @ Y
        M_2 = pinv((sige_old / sig2_old) ** 2 * eye(q) +
                   X_2.transpose() @ X_2) @ X_2.transpose() @ Y
        S_1 = pinv(sig1_old ** -2 * eye(p) +
                   sige_old ** -2 * X_1.transpose() @ X_1)
        S_2 = pinv(sig2_old ** -2 * eye(q) +
                   sige_old ** -2 * X_2.transpose() @ X_2)

        S_3 = bmat([[sig1_old ** 2 * eye(p), zeros((p, q))],
                    [zeros((q, p)), sig2_old ** 2 * eye(q)]])
        S_4 = pinv(pinv(S_3) + sige_old ** -2 * X_3.transpose() @ X_3)
        M_4 = sige_old ** -2 @ S_4 @ X_3.transpose() @ y



        B_1_exp = M_1.transpose() @ M_1 + trace(S_1)
        B_2_exp = M_2.transpose() @ M_2 + trace(S_2)

        # E step
        E_error_old = ((Y - g1_old * X_1 @ M_1
                         - g2_old * X_2 @ M_2).transpose() @ (
                                Y - g1_old * X_1 @ M_1 - g2_old * X_2 @ M_2) +
                        g1_old ** 2 * trace(X_1.transpose() @ X_1 @ S_1) +
                        g2_old ** 2 * trace(X_2.transpose() @ X_2 @ S_2))
        inc_ll_old = -(n * log(2 * pi * sige_old ** 2) +
                       E_error_old / sige_old ** 2) / 2
        ll_old = -(p * log(2 * pi * sig1_old ** 2) +
                   q * log(2 * pi * sig2_old ** 2) +
                   B_1_exp / (g1_old * sig1_old) ** 2 +
                   B_2_exp / (g2_old * sig2_old) ** 2) / 2 + inc_ll_old

        inlLs_st.append(inc_ll_old)
        lLs_st.append(ll_old)

        # M step
        if PX:
            g1_new = sqrt(B_1_exp / (p * sig1_old ** 2))
            g2_new = sqrt(B_2_exp / (q * sig2_old ** 2))
        else:
            g1_new, g2_new = g1_old, g2_old
        sig1_new = sqrt(B_1_exp / (p * g1_new ** 2))
        sig2_new = sqrt(B_2_exp / (q * g2_new ** 2))
        E_error_new = ((Y - g1_new * X_1 @ M_1
                        - g2_new * X_2 @ M_2).transpose() @ (
                Y - g1_new * X_1 @ M_1 - g2_new * X_2 @ M_2) +
        g1_new ** 2 * trace(X_1.transpose() @ X_1 @ S_1) +
        g2_new ** 2 * trace(X_2.transpose() @ X_2 @ S_2))
        sige_new = sqrt(E_error_new / n)

        inc_ll_new = -(n * log(2 * pi * sige_new ** 2) +
                       E_error_new / sige_new ** 2) / 2
        ll_new = -(p * log(2 * pi * sig1_new ** 2) +
                   q * log(2 * pi * sig2_new ** 2) +
                   B_1_exp / (g1_new * sig1_new) ** 2 +
                   B_2_exp / (g2_new * sig2_new) ** 2) / 2 + inc_ll_new

        if not lLs_px:
            lLs_px.append(ll_old)
            inlLs_px.append(inc_ll_old)
        inlLs_px.append(inc_ll_new)
        lLs_px.append(ll_new)

        if PX:
            print("The calculated parameters γ1, γ2:")
            print(g1_new, g2_new)

        print("Incomplete log-likelihood difference")
        if PX:
            print(inc_ll_new - inlLs_px[-2])
        else:
            print(inc_ll_new - inc_ll_old)
        print("Complete log-likelihood difference")
        if PX:
            print(ll_new - lLs_px[-2])
        else:
            print(ll_new - ll_old)

        if PX and abs(inc_ll_new - inlLs_px[-2]) < 10 ** -6:
            print("Incomplete log-likelihood looks converged!")
            break
        elif not PX and abs(inc_ll_new - inc_ll_old) < 10 ** -6:
            print("Incomplete log-likelihood looks converged!")
            break

        # R step
        sig1_old, sig2_old = sig1_new * g1_new, sig2_new * g2_new
        sige_old = sige_new

    if PX:
        print("PXEM done!")
        return lLs_st, inlLs_st
    else:
        print("Standard EM done!")
        return lLs_px, inlLs_px


lLs_std, inlLs_std = PXEM(Y, X_1, X_2, sig1_old, sig2_old, sige_old, PX=False)
lLs_PXed, inlLs_PXed = PXEM(Y, X_1, X_2, sig1_old, sig2_old, sige_old, PX=True)

#lLs_std = [-1881.3640161100377, -1570.0841138176283, -1270.0456688951272, -1010.7823281628062, -809.9093822951811, -637.553090599545, -472.4181493708272, -309.5283718639073, -148.65966296016472, 9.635801385265495, 164.64783557040812, 315.555079813382, 461.41882583475103, 601.1903979131736, 733.7413300870044, 857.9192151499263, 972.6283306118362, 1076.9278238712236, 1170.132670349124, 1251.897207735506, 1322.2615040840794, 1381.6486422947962, 1430.8137608539475, 1470.7579552547716, 1502.6268502697917, 1527.613107297343, 1546.8763288060186, 1561.4863781997055, 1572.3899649017264, 1580.3966674699632, 1586.1792039439938, 1590.2829208567337, 1593.1403701981317, 1595.0879359680891, 1596.382474882642, 1597.2167407935049, 1597.7329548766738, 1598.0342896391883, 1598.1942927650502, 1598.264425028409, 1598.279957984296, 1598.2644982586999, 1598.2333957884848]
#inlLs_std = [-759.1805016281958, -601.2436347455891, -723.9679961380001, -812.2221726632769, -857.014402773837, -860.5281332748702, -839.4783095542844, -807.9985338096369, -772.9571333858175, -737.079029977192, -701.4386820446736, -666.5365593774857, -632.6920590311215, -600.1774968405983, -569.2582028055592, -540.1965135567185, -513.2398673486964, -488.60144363025944, -466.43895547694694, -446.83681826917245, -429.7962312713696, -415.2357572825952, -403.0021190543391, -392.88828931364446, -384.65460402637234, -378.04888073683924, -372.8228670912426, -368.743949667678, -365.60229541898235, -363.2142620312153, -361.4230937008466, -360.0978211195826, -359.13108567920705, -358.4364090864703, -357.94526827774433, -357.6042149891899, -357.3721911715844, -357.218126816482, -357.1188595850866, -357.05738212435125, -357.0214005214491, -357.00217380888523, -356.9935977451256]
#lLs_PXed = [-1881.3640161100377, -1433.9320492162415, -993.6789243032043, -566.704194225938, -167.57687655939878, 179.18798247903112, 455.14631506575756, 665.5541901773765, 829.3420822186712, 962.3545099491879, 1073.3543095674077, 1166.6682239828197, 1244.778445131039, 1309.6073672694413, 1362.9545821713377, 1406.5576411201432, 1442.0369038421336, 1470.8368685206465, 1494.1972513159053, 1513.1528513959747, 1528.551440071125, 1541.0795715129336, 1551.2896897415144, 1559.625073875251, 1566.441256776712, 1572.023704826431, 1576.6020826596164, 1580.3616167364821, 1583.4520900076118, 1585.9949450846148, 1588.0888955708833, 1589.81436781626, 1591.2370275297133, 1592.410589822792, 1593.379066799011, 1594.1785721047083, 1594.838775062776, 1595.384076428005, 1595.8345620139803, 1596.2067783159519, 1596.5143649142303, 1596.7685712181126, 1596.9786794940974, 1597.1523517323717, 1597.2959144551587, 1597.414592843236, 1597.5127033898839, 1597.5938125606763, 1597.660867548879, 1597.7163040972705, 1597.7621354522796, 1597.800025782005, 1597.8313507920889, 1597.857247785911, 1597.878657016899, 1597.8963558542846, 1597.910987015749, 1597.9230819003392, 1597.933079874087, 1597.9413442117757, 1597.9481752755892, 1597.953821410196, 1597.9584879504027, 1597.9623446686085, 1597.9655319325107, 1597.968165796521, 1597.9703422116213, 1597.972140506335, 1597.9736262650422, 1597.9748537079884, 1597.975867659262, 1597.9767051740594, 1597.9773968842424, 1597.9779681109308, 1597.9784397844676, 1597.9788292051053, 1597.9791506719655, 1597.9794160030972, 1597.979634965474, 1597.9798156305123, 1597.979964668023, 1597.9800875892402, 1597.980188947749, 1597.9802725056004, 1597.980341370647, 1597.980398110069, 1597.980444844233, 1597.9804833242742, 1597.9805149962276, 1597.9805410540384, 1597.9805624833784, 1597.9805800978602, 1597.980594568965, 1597.9806064507811, 1597.9806162004388, 1597.980624195005, 1597.9806307454369, 1597.980636108113, 1597.9806404943574]
#inlLs_PXed = [-759.1805016281958, -757.6566364003413, -748.2464127961446, -722.2692355919837, -674.5338977459278, -614.954854479213, -562.6471013285973, -525.0372000518666, -497.6958000138269, -475.42043559820615, -455.91303523955133, -438.66550816188385, -423.70118656519423, -411.0333460601709, -400.53986493478953, -391.98959211696354, -385.1003227168983, -379.5864299748208, -375.1872999473035, -371.6796698250995, -368.8796722005882, -366.63953580810585, -364.8421983863924, -363.39563022721626, -362.22770087363665, -361.2818741270296, -360.51374559143085, -359.88832389593443, -359.3779243237592, -358.9605478113474, -358.6186362978209, -358.33811634263986, -358.1076622060502, -357.91812568436825, -357.76209276651866, -357.63353702355016, -357.527547100812, -357.44011127600015, -357.3679462200387, -357.3083602067844, -357.25914333529727, -357.21847906096053, -357.18487263225495, -357.15709301139543, -357.13412560216193, -357.11513367777235, -357.0994268399677, -357.08643518022325, -357.07568807915817, -357.0667967885552, -357.05944010512894, -357.05335257618515, -357.0483147820551, -357.04414532433714, -357.0406942168564, -357.03783743123483, -357.03547239361615, -357.0335142654795, -357.0318928711887, -357.0305501592368, -357.02943810408044, -357.0285169718222, -357.0277538864485, -357.0271216443971, -357.02659773434755, -357.02616352663307, -357.02580360287055, -357.02550520151703, -357.0252577592752, -357.0250525317588, -357.0248822797013, -357.02474100937053, -357.02462375781545, -357.0245264151931, -357.02444557776676, -357.02437842627523, -357.02432262528873, -357.0242762399264, -357.0242376669369, -357.0242055776621, -357.02417887083163, -357.02415663349177, -357.02413810866494, -357.024122668578, -357.0241097924998, -357.02409904839135, -357.0240900777128, -357.0240825828424, -357.0240763166578, -357.0240710739058, -357.0240666840549, -357.024063005373, -357.02405992002105, -357.02405732998693, -357.0240551537157, -357.0240533233168, -357.02405178224706, -357.02405048339125, -357.02404938746884]

print(lLs_std)
print(inlLs_std)
print(lLs_PXed)
print(inlLs_PXed)

from matplotlib import pyplot as plt

plt.rcParams['font.family'] = 'Arial'
plt.rcParams['font.size'] = 12

figa, [axea, axeb] = plt.subplots(figsize=(8, 4), ncols=2)
axea.plot(lLs_std, label="STEM")
axea.plot(lLs_PXed, label="PXEM")
axeb.plot(inlLs_std, label="STEM")
axeb.plot(inlLs_PXed, label="PXEM")
axea.set_title("Complete log-likelihood", fontsize=12)
axeb.set_title("Incomplete log-likelihood", fontsize=12)
plt.legend()
plt.show()
